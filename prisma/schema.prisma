generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(cuid())
  username  String   @unique
  password  String
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

model User {
  id        String     @id @default(cuid())
  code      String     @unique
  name      String
  email     String     @unique
  avatar    String?
  password  String
  apiQuota  Int        @default(2)
  dbQuota   Int        @default(1)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  apis      Api[]
  databases Database[]

  @@map("users")
}

model Api {
  id        String     @id @default(cuid())
  userId    String
  name      String
  gitUrl    String
  gitToken  String?
  lastJobId String?
  domain    String
  envs      Json?
  status    ApiStatus  @default(PENDING)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  api_infor ApiInfor[]
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "apis_userId_fkey")
  @@map("apis")
}

model ApiInfor {
  id          String   @id @default(cuid())
  apiId      String
  serverIp   String
  serverPort Int
  execNode   String
  createdAt  DateTime @default(now()) @db.DateTime(0)
  updatedAt  DateTime @default(now()) @db.DateTime(0)
  apis        Api      @relation(fields: [apiId], references: [id], onDelete: Cascade, map: "fk_api_id")

  @@index([apiId], map: "fk_api_id")
  @@map("api_infor")
}

model Database {
  id          String   @id @default(cuid())
  userId      String
  name        String
  username    String
  password    String
  apiPassword String?
  host        String
  status      DbStatus @default(CREATING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "databases_userId_fkey")
  @@map("databases")
}

enum ApiStatus {
  PENDING
  BUILDING
  RUNNING
  ERROR
}

enum DbStatus {
  CREATING
  RUNNING
  ERROR
}
